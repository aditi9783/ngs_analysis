#!/usr/bin/python

# script to run bwa mem to align the filtered fastq files (whose location is specified in working direcotry mentioned in quality_control .run files). bwa in paired-end mode with s1_palindrome_pe and s2_palindrome_pe, bwa in sigle read mode with s1_palindrome_se, and then merge the sam files that is generated by these bwa commands. bwa for s2_palindrome_se is not done as there are too few reads, and fastQC output shows a lack of data.

# From the merged .sam file, get the bam file, and the sorted bam file. 
# Use these files to generate pileup output, and call variants using samtools.
 
# COMPLETE PATHS TO INPUT FASTQ FILES AND OUTPUT DIRECTORY ARE REQUIRED IN COMMAND LINE

import sys, os, subprocess

main_dir = sys.argv[1]; # argv[0] is the script name. argv[1] contains directory name (with complete path) where the directory 'quality_control' lies with filtered fastq files. For example:/mnt/scratch/agupta/MiSeq_Mar2013/TcellHIVanalysis. This location contains a sub-directory with filtered fastq files in it.
fastq_loc = main_dir + "/quality_control";
out_loc = main_dir + "/mapping"; # location where output files are to be stored. A new folder called 'mapping' will be created

# create output directory
os.makedirs(out_loc);

# bwa was locally installed as the hpcc bwa didn't have the mem alignment option
bwa_loc = "/mnt/home/agupta/HIV_Sequencing/analysis/bwa-0.7.4";
os.chdir(bwa_loc); # change to bwa directory;
print ("\nIn bwa directory: "+bwa_loc+"\n");
subprocess.call('pwd');

reference_loc = "/mnt/home/agupta/HIV_Sequencing/analysis/reference_seq"; # location for reference seq
# reference is already indexed using 'bwa index ref.fa' command.

input_files = ["s1_palindrome_pe", "s1_palindrome_se", "s2_palindrome_pe", "s2_palindrome_se"];
# run alignemnt with paired end reads
bwa_cmd_pe = "./bwa mem "+ reference_loc +"/HXB2.fa "+ fastq_loc +"/s1_palindrome_pe.filt "+ fastq_loc +"/s2_palindrome_pe.filt > "+ out_loc +"/alnpe_s1_s2_palindrome.sam";

# run alignemnt with single end reads
bwa_cmd_se1 = "./bwa mem "+ reference_loc +"/HXB2.fa "+ fastq_loc +"/s1_palindrome_se.filt > "+ out_loc +"/alnse_s1_palindrome.sam";
bwa_cmd_se2 = "./bwa mem "+ reference_loc +"/HXB2.fa "+ fastq_loc +"/s2_palindrome_se.filt > "+ out_loc +"/alnse_s2_palindrome.sam";

bwa_out_pe= subprocess.Popen(bwa_cmd_pe, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT);
bwa_out_se1= subprocess.Popen(bwa_cmd_se1, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT);
bwa_out_se2= subprocess.Popen(bwa_cmd_se2, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT);

print ('\nBWA PE command:');
print (bwa_cmd_pe, '\n');
bwa_out_pe.communicate();

print ('\nBWA SE1 command:');
print (bwa_cmd_se1, '\n');
bwa_out_se1.communicate();

print ('\nBWA SE2 command:');
print (bwa_cmd_se2, '\n');
bwa_out_se2.communicate();

# change to out_loc directory, where all sam files are stored.
os.chdir(out_loc);
print ("\nChanging to this directory for mapping: "+out_loc+"\n");

alnfiles = ["alnpe_s1_s2_palindrome", "alnse_s1_palindrome", "alnse_s2_palindrome"];
# load samtools 
subprocess.call(['bash', '-c', 'module load GNU/4.4.5']);
subprocess.call(['bash', '-c', 'module load SAMTools/0.1.18']);

# convert sam to bam. sort and index the bam files 
print ("Running samtools to convert sam to bam, and to sort the bam files ...");
for samf in alnfiles:
	# 'samtools view -uS <in.sam> -o <out.bam>' results in missing EOF marker in bam file. Thus use '-bS' instead of '-uS'.
	subprocess.call(['samtools', 'view', '-bS', samf+".sam", '-o', samf+".bam"]);
	subprocess.call(['samtools', 'sort', samf+".bam", samf+".bam.sorted"]);

# merge the three .sam files created
print ("Merging the sorted bam files ...");
subprocess.call(['samtools', 'merge', '-h', alnfiles[0]+".sam", 'merged.sorted.bam', alnfiles[0]+".bam.sorted.bam", alnfiles[1]+".bam.sorted.bam", alnfiles[2]+".bam.sorted.bam"]);

# index the merged bam file
print ("Indexing the merged bam file ...");
subprocess.call(['samtools', 'index', 'merged.sorted.bam']);

# run mpileup on the merged alignment. NOTE: mpileup is not running using qsub for some reason. works fine from command line. The qsub job is killed with exit code=2.
#print ("Generating mpileup output for the merged bam file ...");
#subprocess.call(['samtools', 'mpileup', '-f', reference_loc+"/HXB2.fa", '-d', '1000000', 'merged.sorted.bam', '>', 'merged.sorted.bam.mpileup']);

print ("\nCompleted Mapping. Files are in "+out_loc);

